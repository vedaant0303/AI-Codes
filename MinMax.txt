def minimax(depth, nodeIndex, isMax, scores, height): 
    # base case: reached leaf node 
    if depth == height: 
        return scores[nodeIndex] 
 
    if isMax: 
        return max( 
            minimax(depth + 1, nodeIndex * 2, False, scores, height), 
            minimax(depth + 1, nodeIndex * 2 + 1, False, scores, height) 
        ) 
    else: 
        return min( 
            minimax(depth + 1, nodeIndex * 2, True, scores, height), 
            minimax(depth + 1, nodeIndex * 2 + 1, True, scores, height) 
        ) 
 
 
# Leaf node values (depth = 2) 
scores = [3, 5, 2, 9] 
 
import math 
height = int(math.log2(len(scores)))  # height = 2 
 
# Start from root (depth=0), node index 0, MAX's turn 
best = minimax(0, 0, True, scores, height) 
print("The optimal value is:", best) 