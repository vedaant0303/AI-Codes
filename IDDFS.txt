def dls(graph, start, goal, limit): 
    print(f"Exploring node {start} with limit {limit}") 
    if start == goal: 
        return True 
    if limit <= 0: 
        return False 
 
    for neighbor in graph.get(start, []): 
        if dls(graph, neighbor, goal, limit - 1): 
            return True 
    return False 
 
# Iterative Deepening DFS (IDDFS) 
def iddfs(graph, start, goal, max_depth): 
    for depth in range(max_depth + 1): 
        print(f"\nSearching with depth limit: {depth}") 
        if dls(graph, start, goal, depth): 
            print(f"\nGoal '{goal}' found at depth {depth}") 
            return True 
    print(f"\nGoal '{goal}' not found within depth {max_depth}") 
    return False 
# Example graph 
graph = { 
    'A': ['B', 'C'], 
    'B': ['D', 'E'], 
    'C': ['F'], 
    'E': ['G'] 
} 
 
# Run IDDFS 
start_node = 'A' 
goal_node = 'G' 
max_depth = 5 
 
iddfs(graph, start_node, goal_node, max_depth)